import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta

TICKERS = ["AAPL", "MSFT", "GOOGL", "AIR.PA"]
TARGET_DATE = "2025-03-31"

def get_closest_price(ticker, date):
    stock = yf.Ticker(ticker)
    date_dt = pd.to_datetime(date)
    hist = stock.history(start=(date_dt - timedelta(days=5)).strftime("%Y-%m-%d"),
                         end=(date_dt + timedelta(days=5)).strftime("%Y-%m-%d"))
    if hist.empty:
        return None, None
    closest_idx = (abs(hist.index - date_dt)).argmin()
    close_date = hist.index[closest_idx]
    close_price = hist.iloc[closest_idx]["Close"]
    return close_price, close_date.strftime("%Y-%m-%d")

def get_shares_outstanding(ticker):
    stock = yf.Ticker(ticker)
    return stock.info.get("sharesOutstanding", None)

def get_ttm_sum(df, end_date, col):
    if col not in df.index:
        return None
    cols_sorted = sorted(df.columns, reverse=True)
    selected = []
    for c in cols_sorted:
        if pd.to_datetime(c) <= pd.to_datetime(end_date):
            selected.append(c)
        if len(selected) == 4:
            break
    if len(selected) < 4:
        return None
    return df.loc[col, selected].sum()

def get_last_quarter_value(df, end_date, col):
    if col not in df.index:
        return None
    for c in sorted(df.columns, reverse=True):
        if pd.to_datetime(c) <= pd.to_datetime(end_date):
            return df.loc[col, c]
    return None

def extract_valuation(ticker, date):
    stock = yf.Ticker(ticker)
    close_price, actual_date = get_closest_price(ticker, date)
    shares = get_shares_outstanding(ticker)
    market_cap = close_price * shares if close_price and shares else None

    qf = stock.quarterly_financials
    ebitda_ttm = get_ttm_sum(qf, date, "Ebitda")
    net_income_ttm = get_ttm_sum(qf, date, "Net Income")
    revenue_ttm = get_ttm_sum(qf, date, "Total Revenue")

    eps_ttm = (net_income_ttm / shares) if shares and net_income_ttm else None
    trailing_pe = (close_price / eps_ttm) if close_price and eps_ttm and eps_ttm != 0 else None
    price_to_sales = (market_cap / revenue_ttm) if market_cap and revenue_ttm else None

    qbs = stock.quarterly_balance_sheet
    equity = get_last_quarter_value(qbs, date, "Total Stockholder Equity")
    price_to_book = (market_cap / equity) if market_cap and equity else None

    debt = get_last_quarter_value(qbs, date, "Long Term Debt") or 0
    cash = get_last_quarter_value(qbs, date, "Cash") or 0
    enterprise_value = (market_cap + debt - cash) if market_cap is not None else None

    ev_to_revenue = (enterprise_value / revenue_ttm) if enterprise_value and revenue_ttm else None
    ev_to_ebitda = (enterprise_value / ebitda_ttm) if enterprise_value and ebitda_ttm else None

    result = {
        "Ticker": ticker,
        "Date de référence": actual_date,
        "Market Cap": market_cap,
        "Enterprise Value": enterprise_value,
        "Trailing P/E": trailing_pe,
        "Forward P/E": "Non disponible",
        "PEG Ratio (5yr expected)": "Non disponible",
        "Price/Sales": price_to_sales,
        "Price/Book": price_to_book,
        "Enterprise Value/Revenue": ev_to_revenue,
        "Enterprise Value/EBITDA": ev_to_ebitda,
        "Cours de l'action": close_price,
        "Shares Outstanding": shares,
    }
    return result

def main():
    results = []
    for ticker in TICKERS:
        print(f"Extraction pour {ticker}...")
        try:
            data = extract_valuation(ticker, TARGET_DATE)
            results.append(data)
        except Exception as e:
            print(f"Erreur pour {ticker}: {e}")
    df = pd.DataFrame(results)
    df.to_excel(f"valuation_multi_{TARGET_DATE}.xlsx", index=False)
    print(df)
    print(f"\nFichier Excel généré: valuation_multi_{TARGET_DATE}.xlsx")

if __name__ == "__main__":
    main()
